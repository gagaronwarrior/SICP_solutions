Exercise 1.1:
Welcome to DrRacket, version 6.9 [3m].
Language: sicp, with debugging; memory limit: 256 MB.
> 10
10
> (+ 5 3 4)
12
> (- 9 1)
8
> (/ 6 2)
3
> (+ (* 2 4) (- 4 6))
6
> (define a 3)
> a
3
> (define b (+ a 1))
> b
4
> (+ a b (* a b))
19
> (= a b)
#f
> (if (and (> b a) (< b (* a b)))
      b
      a)
4
> (cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25))
16
> (+ 2 (if (> b a) b a))
6
> (* (cond ((> b a) a)
           ((< a b) b)
           (else -1))
     (+ a 1))
12
> (* (cond ((> a b) a)
           ((< a b) b)
           (else -1))
     (+ a 1))
16
> 

------------------------------------------------------------------------------------------
Exercise 1.2:
Welcome to DrRacket, version 6.9 [3m].
Language: sicp, with debugging; memory limit: 256 MB.
> (/ (+ 5 4 (- 2
               (- 3 (+ 6
                       (/ 4 5)))))
     (* 3 (- 6 2) (- 2 7)))
-37/150

------------------------------------------------------------------------------------------
Exercise 1.3:
#lang sicp
(define (square x) (* x x))

(define (sum-of-square x y)
  (+ (square x) (square y)))

(define (sum-square-larger-two x y z)
  (cond ((and (< x y) (< x z)) (sum-of-square y z))
        ((and (< y x) (< y z)) (sum-of-square x z))
        (else (sum-of-square x y))))

Test:
Welcome to DrRacket, version 6.9 [3m].
Language: sicp, with debugging; memory limit: 256 MB.
> (sum-square-larger-two 1 2 3)
13
> (sum-square-larger-two 3 2 1)
13
> (sum-square-larger-two 1 3 2)
13
> (sum-square-larger-two 2 3 1)
13
> (sum-square-larger-two 3 1 2)
13
> (sum-square-larger-two 1 2 3)
13
> (sum-square-larger-two 2 2 1)
8
> (sum-square-larger-two 1 2 2)
8
> (sum-square-larger-two 2 2 2)
8
> (sum-square-larger-two 2 1 2)
8
>

-----------------------------------------------------------------------------------------
Exercise 1.4:
(define (a-plus-abs-b a b)
 ((if (> b 0) + -) a b))

=> (define (a-plus-abs-b a b)
     ((if (#t) + -) a b)) ===> (+ a b)
=> (define (a-plus-abs-b a b)
     ((if (#f) + -) a b)) ===> (- a b)

-------------------------------------------------------------------------------------------
Exercise 1.5:
Applicative order evaluation:
This evaluation process first resolve the operands and get value.
(test 0 (p))
Here, operator is 'test' and operands are '0' and '(p)'.
so, first operand '(p)' is evaluated and result from it will be use to evalute 'test'.
we know that (define (p) (p))
so, when '(p)' is called, (test 0 (p)), it is replaced by (p) as defined in function.
This way, to resovle '(p) again, '(p)' is called and hence forth .... again in infinite loop.
Thus, in Applicative order of evaluation, this programme will hang up in infinite recursive calls.

Normal Order Evaluation:
This evaluation process is lazy evaulation and don't evaluate the operands until it is really needed.
like,
(test 0 (p)) when called following substitution happens,
(if (= 0 0)
   0
   (p))
Now (= 0 0) is evalute to #t(true), thus consequent part will be executed and return value '0'.
Thus, in Normal order of evaluation, this programme will return 0.

-------------------------------------------------------------------------------------------------------

Exercise 1.6:

(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))

Applicative order evaluation:

The arguments of "new-if" procedure will be first evaluated.
(goo-enough? guess x) = predicate will return #t or #f.
guess = primitive data.
(sqrt-iter (improve guess x) x) = calls sqrt-iter on its arguement, which will again follow the same procedure defined above.
which means it will keep calling the "sqrt-iter" and will never exit the loop of recursive call as check for base condition is done inside "new-if".

Normal order evaluation:

The program will terminate, as "sqrt-iter" won't be evaluated until it is needed.It means new-if will be evaluated first.

Hence, with Applicative order interpretor "new-if" implementation will stuck in infinite loop.
whereas with Normal order interpretor "new-if" will work as expected.

----------------------------------------------------------------------------------------------------------------

Exercise 1.7:

for small numbers following deviation is seen:
> (square (sqrt 0.9))
0.9000017313019391
> (square (sqrt 0.09))
0.09001798129164813
> (square (sqrt 0.009))
0.009081934804666247
> (square (sqrt 0.0009))
0.0016241401856992538

it can be seen that for 0.0009 the sqrt evaluation is not correct.

for large numbers following deviation is seen:
> (square (sqrt 9))
9.00054933317044
> (square (sqrt 90))
90.00047291937803
> (square (sqrt 900))
900.0001385467602
> (square (sqrt 9000))
9000.000015152564
> (square (sqrt 90000))
90000.00000049788
> (square (sqrt 900000))
900000.0000000037
> (square (sqrt 9000000))
9000000.0
> (square (sqrt 90000000))
90000000.00035952
> (square (sqrt 900000000))
900000000.0000024
> (square (sqrt 9000000000))
9000000000.0
> (square (sqrt 90000000000))
90000000000.0
> (square (sqrt 900000000000))
899999999999.9999
> (square (sqrt 9000000000000))
9000000000000.0
> (square (sqrt 90000000000000))
No result.

Thus we see for small numbers result are incorrect and for large numbers after sometime programme hang up.why?
Lets see the result when added the display result to the guess-enough? procedure:

(define (good-enough?  guess x)
  (display guess)
  (newline)
  (< (abs (- (square guess) x)) 0.001))


> (square (sqrt 0.9))
1.0
0.95
0.9486842105263158
0.9000017313019391
> (square (sqrt 0.09))
1.0
0.545
0.35506880733944957
0.3042704026361998
0.3000299673226795
0.09001798129164813
> (square (sqrt 0.009))
1.0
0.5045
0.2611697224975223
0.1478150361594179
0.10435097036251169
0.09529918575027935
0.009081934804666247
> (square (sqrt 0.0009))
1.0
0.50045
0.25112419072834447
0.12735403742556764
0.06721047559484776
0.04030062264654547
0.0016241401856992538
> 

another example:
> (square (sqrt 90000000000000))
1.0
45000000000000.5
22500000000001.25
11250000000002.625
5625000000005.3125
2812500000010.6562
1406250000021.3281
703125000042.6641
351562500085.33203
175781250170.66602
87890625341.33301
43945313182.666504
21972657615.333237
10986330855.66649
5493169523.832227
2746592953.907969
1373312860.8888285
686689197.9231743
343410130.7919059
171836104.04614136
86179929.46873201
43612128.07654334
22837887.11099632
13389353.505476972
10055555.975293374
9502915.922392966
9486846.590065714
9486832.980514899
9486832.980505139
9486832.980505139
9486832.980505139
9486832.980505139
9486832.980505139
9486832.980505139

Problem here is "improve" procedure after sometime cannot improve the guess, as a result it will return the same value,
whereas the "good-enough?" procedure returns false asking for improvement as guess is not within the precise limit,
hence it will stuck in infinite loop.

Hence solution is to stop if we cannot improve the guess anymore.


under new solution we can see that execution getting failed previously is getting pass now:

(define (good-enough?  guess x)
  (display guess)
  (newline)
  (< (abs (- guess (improve guess x))) 0.001))


Welcome to DrRacket, version 6.9 [3m].
Language: sicp, with debugging; memory limit: 256 MB.
> (square (sqrt 0.9))
1.0
0.95
0.9486842105263158
0.9000017313019391
> (square (sqrt 0.0009))
1.0
0.50045
0.25112419072834447
0.12735403742556764
0.06721047559484776
0.04030062264654547
0.031316391905865756
0.03002766742182557
0.0009016608107957646
> 

> (square (sqrt 90000000000000))
1.0
45000000000000.5
22500000000001.25
11250000000002.625
5625000000005.3125
2812500000010.6562
1406250000021.3281
703125000042.6641
351562500085.33203
175781250170.66602
87890625341.33301
43945313182.666504
21972657615.333237
10986330855.66649
5493169523.832227
2746592953.907969
1373312860.8888285
686689197.9231743
343410130.7919059
171836104.04614136
86179929.46873201
43612128.07654334
22837887.11099632
13389353.505476972
10055555.975293374
9502915.922392966
9486846.590065714
9486832.980514899
90000000000185.2
> 

Surely we are not getting very close approximation, but now programme is not going to hangup.
instead of checking the precise tolerance 0.001, lets check for the equality that guess and improve guess are same, then stop.

(define (good-enough?  guess x)
  (display guess)
  (newline)
  (= (abs (- guess (improve guess x))) 0.0))

Welcome to DrRacket, version 6.9 [3m].
Language: sicp, with debugging; memory limit: 256 MB.
> (square (sqrt 90000000000000))
1.0
45000000000000.5
22500000000001.25
11250000000002.625
5625000000005.3125
2812500000010.6562
1406250000021.3281
703125000042.6641
351562500085.33203
175781250170.66602
87890625341.33301
43945313182.666504
21972657615.333237
10986330855.66649
5493169523.832227
2746592953.907969
1373312860.8888285
686689197.9231743
343410130.7919059
171836104.04614136
86179929.46873201
43612128.07654334
22837887.11099632
13389353.505476972
10055555.975293374
9502915.922392966
9486846.590065714
9486832.980514899
9486832.980505139
90000000000000.02

(square (sqrt 2))
1.0
1.5
1.4166666666666665
1.4142156862745097
1.4142135623746899
1.414213562373095
1.9999999999999996

-------------------------------------------------------------------------------------------------------------
Exercise 1.8:

(define (cubert-iter guess x)
  (if (good-enough? guess x)
      guess
      (cubert-iter (improve guess x)
                 x)))

(define (improve guess x)
  (/ (+ (/ x (square guess))
        (* 2 guess))
      3))


(define (good-enough?  guess x)
  (display guess)
  (newline)
  (= (abs (- guess (improve guess x))) 0.0))

(define (square x) (* x x))

(define (abs x)
  (if (< x 0)
      (- x)
      x))

(define (cubert x)
  (cubert-iter 1.0 x))

Welcome to DrRacket, version 6.9 [3m].
Language: sicp, with debugging; memory limit: 256 MB.
> (cubert 27)
1.0
9.666666666666666
6.540758356453956
4.570876778578707
3.4780192333867963
3.0626891086275365
3.001274406506175
3.0000005410641766
3.0000000000000977
3.0
3.0
> (cubert 0.0027)
1.0
0.6675666666666666
0.4470639879962364
0.30254567096857854
0.2115295385445587
0.16113378590375088
0.14208577455447732
0.13930397771706904
0.1392476877693548
0.1392476650083871
0.13924766500838337
0.13924766500838337
> (cubert 0.000027)
1.0
0.6666756666666668
0.4444706938977056
0.2963593530503223
0.19767537403843108
0.1320139057253243
0.08852569059743433
0.060165555303086204
0.04259663081861018
0.03335787189284609
0.030326668677881866
0.030003506130839862
0.030000000409701272
0.030000000000000002
0.03
0.03
> 
 
-----------------------------------------------------------------------------------------------------------------------------
Exercise 1.9:
(define (+ a b)
  (if (= a 0)
       b
	   (inc (+ (dec a) b))))

Here, inc and dec are the primitive procedure.
(+ 4 5)
(inc (+ 3 5))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ 0 5)))))
Here, a = 0, hence b = 5 is returned.
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9	   

clearly, this is linear recursive process, as increment of b is deferred to stack windup. first full expansion and then windup to increment b.
basically, calling recursively, we are implicit maintaining the count of variable a.

(define (+ a b)
  (if (= a 0)
   b
   (+ (dec a) (inc b))))
   
(+ 4 5)
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
9

clearly, this is linear iterative process, as at any point of time, the state variable a and b contains the complete information of the process.
also, the shape of the process is different from the linear recursive one.

--------------------------------------------------------------------------------------------------------------------------------------------------

Exercise 1.10:

(A 1 10) = 1024
(A 2 4)  = 65536
(A 3 3 ) = 65536

f(n) = A(0, n) = 2n
g(n) = A(1, n) = 2^n
h(n) = A(2, n) = 2^ (2^ (2^ (2^ ....))) n times.

-----------------------------------------------------------------------------------------------------------------------------------------------------

Exercise 1.11:
Recursive process:
(define (f n)
  (cond ((< n 3) n)
        (else (+ (f (- n 1))
                 (* 2 (f (- n 2)))
                 (* 3 (f (- n 3)))))))

Welcome to DrRacket, version 6.9 [3m].
Language: sicp, with debugging; memory limit: 256 MB.
> (f 0)
0
> (f 1)
1
> (f 2)
2
> (f 3)
4
> (f 4)
11
> (f 5)
25
> (f 6)
59
> 

Iterative process:

(define (f n)
  (define (f-iter a b c n)
    (if (< n 3)
        a
        (f-iter (+ a (* 2 b) (* 3 c))
                a
                b
                (- n 1))))
  (if (< n 3)
      n
      (f-iter 2 1 0 n)))

Welcome to DrRacket, version 6.9 [3m].
Language: sicp, with debugging; memory limit: 256 MB.
> (f 0)
0
> (f 1)
1
> (f 2)
2
> (f 3)
4
> (f 4)
11
> (f 25)
812934961
> 

-------------------------------------------------------------------------------------------------------------
Exercise 1.12:

(define (Pascals-element row col)
  (cond ((or (= col 1) (= col row)) 1)
        ((and (> col 1) (< col row)) (+ (Pascals-element (- row 1) (- col 1))
                                        (Pascals-element (- row 1) col)))
        (else 0)))
              
Welcome to DrRacket, version 6.9 [3m].
Language: sicp, with debugging; memory limit: 256 MB.
> (Pascals-element 1 1)
1
> (Pascals-element 1 0)
0
> (Pascals-element 2 1)
1
> (Pascals-element 2 0)
0
> (Pascals-element 2 2)
1
> (Pascals-element 2 3)
0
> (Pascals-element 3 1)
1
> (Pascals-element 3 2)
2
> (Pascals-element 3 3)
1
> (Pascals-element 3 4)
0
> 
----------------------------------------------------------------------------------------------------------------

Exercise 1.13:

https://en.wikipedia.org/wiki/Fibonacci_number

----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
Exercise 1.15:

(sine 12.15)
(p (sin 4.05))
(p (p (sin 1.35)))
(p (p (p (sin 0.45))))
(p (p (p (p (sin 0.15)))))
(p (p (p (p (p (sin 0.05))))))
Here, 0.05 is < 0.1 and hence, 0.05 will be return (as for small angles sin x = x)

we can see that , procedure is called 5 times.

space complexity is how much extra space it needs, here at each step, extra space is needed, also,
time complexity is how much steps it need to process the information, here it takes 5 steps for (sin 12.15), hence, number of steps 
is the time complexity.
we get the following recurrence relation from above :
T(n) = T(n/3)
and space and time complexity for this is "big theta (lg n)".

----------------------------------------------------------------------------------------------------------------------------				 				 

Exercise 1.16:
(define (fast-exp base n)
  (define (even? n)
    (= (remainder n 2) 0))
  
  (define (square x) (* x x))
  
  (define (fast-iter base result n)
    (cond ((= n 0) result)
          ((even? n) (fast-iter (square base) result (/ n 2)))
          (else (fast-iter base (* result base) (- n 1)))))
  
  (fast-iter base 1 n))

Welcome to DrRacket, version 6.9 [3m].
Language: racket, with debugging; memory limit: 256 MB.
> (fast-exp 2 0)
1
> (fast-exp 2 1)
2
> (fast-exp 2 2)
4
> (fast-exp 2 3)
8
> (fast-exp 2 4)
16
> (fast-exp 2 5)
32
> (fast-exp 2 6)
64
> (fast-exp 2 7)
128
> 

Lets understand the invariant ab^n should remain constant at every state.
lets assume the call (fast-exp 2 16)
base  result   n     ab^n
2      1      16    1*2^16
2^2    1       8    1.(2^2)^8
4^2    1       4    1.(4^2)^4
16^2   1       2    1.(16^2)^2
256^2  1       1    1.(256^2)^1

---------------------------------------------------------------------------------------------------
Exercise 1.17:

(define (fast-mul a b)
  (define (double x) (+ x x))
  (define (halve x) (/ x 2))
  (cond ((= b 0) 0)
        ((even? b) (double (fast-mul a (halve b))))
        (else (+ a (fast-mul a (- b 1))))))
		
Welcome to DrRacket, version 6.9 [3m].
Language: racket, with debugging; memory limit: 256 MB.
> (fast-mul 2 1)
2
> (fast-mul 2 2)
4
> (fast-mul 2 3)
6
> (fast-mul 1 3)
3
> (fast-mul 2 0)
0
> (fast-mul 0 2)
0
> 

Linear time multiplication:
a*b = a + (a+ (a + (a + ........))) b-times.

logarithmic efficency can be thought like this:
suppose b = 16(when b is even), then
a* 16 = 16a.
2a = a + a
4a = 2a + 2a
8a = 4a + 4a
16a = 8a + 8a
Thus,
b* a = ab/2 + ab/2 = double * ((b/2)*a)
-----------------------------------------------------------------------------------------------------

Exercise 1.18:
(define (fast-mul a b)
  (define (double x) (+ x x))
  (define (halve x) (/ x 2))
  (define (even? x) (= (remainder x 2) 0))
  (define (fast-mul-iter a b result)
    (cond ((= b 0) result)
          ((even? b) (fast-mul-iter (double a) (halve b) result))
          (else (fast-mul-iter a (- b 1) (+ a result)))))
  (fast-mul-iter a b 0))
  
Welcome to DrRacket, version 6.9 [3m].
Language: racket, with debugging; memory limit: 256 MB.
> (fast-mul 2 1)
2
> (fast-mul 2 2)
4
> (fast-mul 2 3)
6
> (fast-mul 2 4)
8
> (fast-mul 2 5)
10
> (fast-mul 2 0)
0
> (fast-mul 0 1)
0
> (fast-mul 1 1)
1
> (fast-mul 200 100)
20000
> 

The iterative invariant here is (result + a*b) = a*b.
suppose b = 16 here,
such that a*16 is to be calculated.
a	 b	result    (result + a*b)
a    16   0         0 + 16a
2a   8    0         0 + 8*(2a)
4a   4    0         0 + 4*(4a)
8a   2    0         0 + 2*(8a)
16a  1    0         0 + 1*(16a)
---------------------------------------------------------------------------------------------------

Exercise 1.19:

(define (fib n)
  (fib-iter 1 0 0 1 n))

(define (even? x) (= (remainder x 2) 0))

(define (fib-iter a b p q count)
  (cond ((= count 0) b)
        ((even? count) (fib-iter a
                                 b
                                 (+ (* p p) (* q q))
                                 (+ (* 2 p q) (* q q))
                                 (/ count 2)))
        (else (fib-iter (+ (* b q) (* a q) (* a p))
                        (+ (* b p) (* a q))
                        p
                        q
                        (- count 1)))))
						
Welcome to DrRacket, version 6.9 [3m].
Language: racket, with debugging; memory limit: 256 MB.
> (fib 0)
0
> (fib 1)
1
> (fib 2)
1
> (fib 3)
2
> (fib 4)
3
> (fib 5)
5
> 

----------------------------------------------------------------------------------------------------------
		

  
